// Generated by CoffeeScript 2.3.2
(function() {
  var Config, GLOBALX, GLOBALY, Moon, SCALE, current_time, draw_grid, helpText, init, moonText, moons, pos_to_percent, redraw, svgDoc, timeText;

  current_time = 0;

  SCALE = 5e7;

  GLOBALX = 0;

  GLOBALY = 0;

  Moon = require("./moon.js");

  Config = require("./config.js");

  moons = Moon.parse_moons();

  pos_to_percent = function(x) {
    var percent;
    // Get coord as percentage of scale
    percent = ((x / SCALE) + 1) * 50;
    return percent;
  };

  draw_grid = function(svgDoc) {
    var i, j, results, x, y;
    // Draw grid
    svgDoc.selectAll("line").remove();
    svgDoc.append("line").attr("class", "grid-line-center").attr("x1", "0%").attr("x2", "100%").attr("y1", `${50 + GLOBALY}%`).attr("y2", `${50 + GLOBALY}%`);
    svgDoc.append("line").attr("class", "grid-line-center").attr("x1", `${50 + GLOBALX}%`).attr("x2", `${50 + GLOBALX}%`).attr("y1", "0%").attr("y2", "100%");
    for (y = i = 0; i < 20; y = ++i) {
      svgDoc.append("line").attr("class", "grid-line").attr("x1", "0%").attr("x2", "100%").attr("y1", y * 5 + "%").attr("y2", y * 5 + "%");
    }
    results = [];
    for (x = j = 0; j < 20; x = ++j) {
      results.push(svgDoc.append("line").attr("class", "grid-line").attr("x1", x * 5 + "%").attr("x2", x * 5 + "%").attr("y1", "0%").attr("y2", "100%"));
    }
    return results;
  };

  // Initialize SVG
  svgDoc = d3.select("body").append("svg");

  moonText = svgDoc.append("text").attr("x", "20px").attr("y", "40px").text("").attr("font-family", "sans-serif").attr("font-size", "30px").attr("fill", "red").style("text-shadow", "1px 1px #111");

  helpText = d3.select("body").append("div").style("font-family", "sans-serif").style("font-size", "20px").style("color", "white").style("text-shadow", "1px 1px #111").style("text-align", "right").style("position", "absolute").style("display", "block").style("top", "10px").style("right", "5%").html("q - zoom in<br>\nw - zoom out<br>\nz - step backwards<br>\nZ - step backwards fast<br>\nx - step forwards<br>\nX - step forwards fast<br>\nArrow Keys - move<br>");

  timeText = d3.select("body").append("div").style("font-family", "sans-serif").style("font-size", "20px").style("color", "white").style("text-shadow", "1px 1px #111").style("text-align", "right").style("position", "absolute").style("display", "block").style("top", "80%").style("right", "5%").style("width", "100%").style("height", "100%").html("t: 0 days");

  init = function() {
    $(document).on('keydown', function(e) {
      if (e.key === "q") { // q = zoom in
        SCALE *= 0.95;
        redraw();
      }
      if (e.key === "w") { // w = zoom out
        SCALE /= 0.95;
        redraw();
      }
      if (e.key === "z") { // z = step backward
        current_time -= Config["DT"];
        if (current_time < Config["T0"]) {
          current_time = Config["T0"];
        }
        redraw();
      }
      if (e.key === "Z") { // Z = step backward fast
        current_time -= Config["DT"] * 10;
        if (current_time < Config["T0"]) {
          current_time = Config["T0"];
        }
        redraw();
      }
      if (e.key === "x") { // z = step forward
        current_time += Config["DT"];
        if (current_time > Config["T1"]) {
          current_time = Config["T1"];
        }
        redraw();
      }
      if (e.key === "X") { // Z = step forward fast
        current_time += Config["DT"] * 10;
        if (current_time > Config["T1"]) {
          current_time = Config["T1"];
        }
        redraw();
      }
      if (e.key === "ArrowLeft") { // Move
        GLOBALX += 5;
        redraw();
      }
      if (e.key === "ArrowRight") { // Move
        GLOBALX -= 5;
        redraw();
      }
      if (e.key === "ArrowUp") { // Move
        GLOBALY += 5;
        redraw();
      }
      if (e.key === "ArrowDown") { // Move
        GLOBALY -= 5;
        return redraw();
      }
    });
    svgDoc.append("div").text("Moon: ");
    return redraw();
  };

  redraw = function() {
    var paths, s;
    // Draw grid
    draw_grid(svgDoc);
    // Draw path
    // Remove all old paths
    svgDoc.selectAll("ellipse").remove();
    paths = svgDoc.selectAll("ellipse").data(moons);
    paths.enter().append("ellipse").attr("cx", function(m) {
      return `${-m.semimajor * m.ecc / SCALE * 50 + 50 + GLOBALX}%`;
    }).attr("cy", `${50 + GLOBALY}%`).attr("rx", function(m) {
      return `${m.semimajor / SCALE * 50}%`;
    }).attr("ry", function(m) {
      return `${m.semiminor / SCALE * 50}%`;
    });
    // Draw moons
    svgDoc.selectAll("circle").remove();
    s = svgDoc.selectAll("circle").data(moons);
    s.enter().append("circle").attr("cx", function(m) {
      return `${pos_to_percent(m.get_position_at_time(current_time)[0]) + GLOBALX}%`;
    }).attr("cy", function(m) {
      return `${pos_to_percent(m.get_position_at_time(current_time)[1]) + GLOBALY}%`;
    }).attr("r", function(m) {
      return 5;
    }).attr("fill", function(m) {
      return m.faction_color();
    }).attr("stroke", "black").on("mouseover", function(m) {
      console.log(m.name);
      moonText.text(m.name);
      return moonText.attr("fill", m.faction_color());
    });
    // Update time
    return timeText.html(`t: ${current_time.toFixed(2)} days`);
  };

  init();

}).call(this);
